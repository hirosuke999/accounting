// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/repository/account_title.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "accounting/src/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountTitle is a mock of AccountTitle interface
type MockAccountTitle struct {
	ctrl     *gomock.Controller
	recorder *MockAccountTitleMockRecorder
}

// MockAccountTitleMockRecorder is the mock recorder for MockAccountTitle
type MockAccountTitleMockRecorder struct {
	mock *MockAccountTitle
}

// NewMockAccountTitle creates a new mock instance
func NewMockAccountTitle(ctrl *gomock.Controller) *MockAccountTitle {
	mock := &MockAccountTitle{ctrl: ctrl}
	mock.recorder = &MockAccountTitleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountTitle) EXPECT() *MockAccountTitleMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockAccountTitle) Save(arg0 model.AccountTitle) *model.AccountTitle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*model.AccountTitle)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountTitleMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountTitle)(nil).Save), arg0)
}

// GetAll mocks base method
func (m *MockAccountTitle) GetAll() []model.AccountTitle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.AccountTitle)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockAccountTitleMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAccountTitle)(nil).GetAll))
}

// GetSalesTaxTypes mocks base method
func (m *MockAccountTitle) GetSalesTaxTypes(ids []model.ID) model.SalesTaxTypes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesTaxTypes", ids)
	ret0, _ := ret[0].(model.SalesTaxTypes)
	return ret0
}

// GetSalesTaxTypes indicates an expected call of GetSalesTaxTypes
func (mr *MockAccountTitleMockRecorder) GetSalesTaxTypes(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesTaxTypes", reflect.TypeOf((*MockAccountTitle)(nil).GetSalesTaxTypes), ids)
}
