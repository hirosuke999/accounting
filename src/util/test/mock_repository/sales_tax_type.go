// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/repository/sales_tax_type.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "accounting/src/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSalesTaxType is a mock of SalesTaxType interface
type MockSalesTaxType struct {
	ctrl     *gomock.Controller
	recorder *MockSalesTaxTypeMockRecorder
}

// MockSalesTaxTypeMockRecorder is the mock recorder for MockSalesTaxType
type MockSalesTaxTypeMockRecorder struct {
	mock *MockSalesTaxType
}

// NewMockSalesTaxType creates a new mock instance
func NewMockSalesTaxType(ctrl *gomock.Controller) *MockSalesTaxType {
	mock := &MockSalesTaxType{ctrl: ctrl}
	mock.recorder = &MockSalesTaxTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSalesTaxType) EXPECT() *MockSalesTaxTypeMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockSalesTaxType) Save(arg0 model.SalesTaxType) *model.SalesTaxType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*model.SalesTaxType)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSalesTaxTypeMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSalesTaxType)(nil).Save), arg0)
}
